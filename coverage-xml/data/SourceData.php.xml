<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="SourceData.php" path="\data">
    <totals>
      <lines total="427" comments="187" code="240" executable="79" executed="73" percent="92.41"/>
      <methods count="23" tested="18" percent="78.26"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Soandso\ContinentalIndex\Data\SourceData" start="12" executable="79" executed="73" crap="50.05">
      <namespace name="Soandso\ContinentalIndex\Data"/>
      <method name="__construct" signature="__construct(string $inputType, $source, string $inputTempUnits, string $outputTempUnits, float $latitude)" start="54" end="57" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getInputType" signature="getInputType(): string" start="64" end="67" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getSource" signature="getSource()" start="74" end="77" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getInputTempUnits" signature="getInputTempUnits(): string" start="84" end="87" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getOutputTempUnits" signature="getOutputTempUnits(): string" start="92" end="95" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getLatitude" signature="getLatitude(): float" start="102" end="105" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="setInputType" signature="setInputType(string $inputType): void" start="113" end="120" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="setSource" signature="setSource($source): void" start="126" end="133" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="setTempUnits" signature="setTempUnits(string $inputTempUnits, string $outputTempUnits): void" start="141" end="154" crap="3.04" executable="6" executed="5" coverage="83.333333333333"/>
      <method name="setLatitude" signature="setLatitude(float $latitude): void" start="162" end="169" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="getAssimilateData" signature="getAssimilateData(): array" start="179" end="187" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="checkInputType" signature="checkInputType(string $inputType): bool" start="195" end="198" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="checkSource" signature="checkSource($source): bool" start="206" end="213" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="checkTempUnits" signature="checkTempUnits(string $tempUnits): bool" start="221" end="224" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="checkLatitude" signature="checkLatitude(float $latitude): bool" start="232" end="235" crap="2" executable="1" executed="1" coverage="100"/>
      <method name="setInitData" signature="setInitData(string $inputType, $source, string $inputTempUnits, string $outputTempUnits, float $latitude): void" start="270" end="276" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="getTempAmplitudeData" signature="getTempAmplitudeData()" start="284" end="295" crap="4.05" executable="7" executed="6" coverage="85.714285714286"/>
      <method name="getSourceFromFile" signature="getSourceFromFile()" start="303" end="328" crap="5.07" executable="14" executed="12" coverage="85.714285714286"/>
      <method name="getSourceFromArray" signature="getSourceFromArray()" start="336" end="353" crap="4.03" executable="8" executed="7" coverage="87.5"/>
      <method name="getSourceFromJson" signature="getSourceFromJson()" start="360" end="369" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="convertTemperature" signature="convertTemperature(string $unitFrom, string $unitTo, float $value): float" start="382" end="399" crap="8.09" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="convertFromFtoC" signature="convertFromFtoC(float $value): float" start="409" end="412" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="convertFromCtoF" signature="convertFromCtoF(float $value): float" start="422" end="425" crap="1" executable="1" executed="1" coverage="100"/>
    </class>
    <coverage>
      <line nr="56">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="66">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="76">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="86">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
      </line>
      <line nr="94">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
      </line>
      <line nr="104">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
      </line>
      <line nr="115">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="116">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="118">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
      </line>
      <line nr="128">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="129">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="131">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
      </line>
      <line nr="143">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="144">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="146">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
      </line>
      <line nr="149">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="150">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="164">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="165">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="167">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
      </line>
      <line nr="181">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="182">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="183">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="186">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
      </line>
      <line nr="197">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="208">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="209">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
      </line>
      <line nr="211">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="223">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="234">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="272">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="273">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="274">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="275">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testSetData"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testErrorGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputArrayType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputFileType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputJsonType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetInputType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetArraySourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetFileSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetJsonSourceType"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckTempUnitsOfF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetInputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetOutputTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetTempUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMinCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorOfMaxCheckLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testExceptionSetLatitude"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testIsFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromErrorFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorCheckInputTypeOfJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="286">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="287">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="288">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="289">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
      </line>
      <line nr="290">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="291">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="305">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="306">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="310">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="311">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="312">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
      </line>
      <line nr="313">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
      </line>
      <line nr="317">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
      </line>
      <line nr="318">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
      </line>
      <line nr="321">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="323">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="324">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
      </line>
      <line nr="326">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromFile"/>
      </line>
      <line nr="338">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
      </line>
      <line nr="339">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromArray"/>
      </line>
      <line nr="342">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
      </line>
      <line nr="344">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
      </line>
      <line nr="345">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
      </line>
      <line nr="348">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
      </line>
      <line nr="349">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
      </line>
      <line nr="362">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="364">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="365">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForInputAndOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromJson"/>
      </line>
      <line nr="367">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromEmptyJson"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorGetAssimilateDataFromJson"/>
      </line>
      <line nr="384">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="385">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertTemperature"/>
      </line>
      <line nr="388">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
      </line>
      <line nr="389">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForArraySource"/>
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForOutputJsonSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetSourceFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testGetTempAmplitudeDataFromNotEmptyArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromFile"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessGetAssimilateDataFromArray"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureEqualUnits"/>
      </line>
      <line nr="392">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
      </line>
      <line nr="393">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
      </line>
      <line nr="394">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
      </line>
      <line nr="395">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
      </line>
      <line nr="411">
        <covered by="Soandso\ContinentalIndex\Tests\RegisterTest::testGetIndexForFileSource"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromFtoC"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForFToC"/>
      </line>
      <line nr="424">
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testErrorConvertFromCtoF"/>
        <covered by="Soandso\ContinentalIndex\Tests\Data\SourceDataTest::testSuccessConvertTemperatureForCToF"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Soandso</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">ContinentalIndex</token>
        <token name="T_NS_SEPARATOR">\</token>
        <token name="T_STRING">Data</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="8">
        <token name="T_DOC_COMMENT"> * Class for working with source data</token>
      </line>
      <line no="9">
        <token name="T_DOC_COMMENT"> *</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT"> * @author Dmytriyenko Vyacheslav &lt;dmytriyenko.vyacheslav@gmail.com&gt;</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT"> */</token>
      </line>
      <line no="12">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SourceData</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">SourceDataInterface</token>
      </line>
      <line no="13">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="14">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="15">
        <token name="T_DOC_COMMENT">     * @var string Input source type</token>
      </line>
      <line no="16">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18"/>
      <line no="19">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="20">
        <token name="T_DOC_COMMENT">     * @var string|array Input source</token>
      </line>
      <line no="21">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23"/>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="25">
        <token name="T_DOC_COMMENT">     * @var string Input temperature units</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     * @var string Output temperature units</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="33"/>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="35">
        <token name="T_DOC_COMMENT">     * @var float Geographic latitude</token>
      </line>
      <line no="36">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38"/>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="40">
        <token name="T_DOC_COMMENT">     * @var string[] Supported types of source data</token>
      </line>
      <line no="41">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTypes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'file'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'array'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'json'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45"/>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="47">
        <token name="T_DOC_COMMENT">     * @var string[] Supported temperature unit options</token>
      </line>
      <line no="48">
        <token name="T_DOC_COMMENT">     * F (Fahrenheit), C (Degree Celsius)</token>
      </line>
      <line no="49">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tempUnitOptions</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'F'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'C'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setInitData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="58"/>
      <line no="59">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="60">
        <token name="T_DOC_COMMENT">     * Returns Input source type</token>
      </line>
      <line no="61">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="62">
        <token name="T_DOC_COMMENT">     * @return string Input source type</token>
      </line>
      <line no="63">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputType</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="68"/>
      <line no="69">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="70">
        <token name="T_DOC_COMMENT">     * Returns input source</token>
      </line>
      <line no="71">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="72">
        <token name="T_DOC_COMMENT">     * @return string|array Input source</token>
      </line>
      <line no="73">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">source</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="80">
        <token name="T_DOC_COMMENT">     * Returns temperature units</token>
      </line>
      <line no="81">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="82">
        <token name="T_DOC_COMMENT">     * @return string Input temperature units</token>
      </line>
      <line no="83">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getInputTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="88"/>
      <line no="89">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="90">
        <token name="T_DOC_COMMENT">     * @return string Output temperature units</token>
      </line>
      <line no="91">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getOutputTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">outputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="98">
        <token name="T_DOC_COMMENT">     * Returns geographic latitude</token>
      </line>
      <line no="99">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="100">
        <token name="T_DOC_COMMENT">     * @return float Geographic latitude</token>
      </line>
      <line no="101">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getLatitude</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">latitude</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="108">
        <token name="T_DOC_COMMENT">     * Sets Input source type</token>
      </line>
      <line no="109">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="110">
        <token name="T_DOC_COMMENT">     * @param string $inputType Input source type</token>
      </line>
      <line no="111">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="112">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">checkInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputType</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Data source type is not correct'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="121"/>
      <line no="122">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="123">
        <token name="T_DOC_COMMENT">     * @param string|array $source Input source</token>
      </line>
      <line no="124">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="125">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="126">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="128">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">checkSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="129">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">source</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Data source entered incorrectly'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="134"/>
      <line no="135">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="136">
        <token name="T_DOC_COMMENT">     * Sets temperature units</token>
      </line>
      <line no="137">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="138">
        <token name="T_DOC_COMMENT">     * @param string $inputTempUnits Input temperature units</token>
      </line>
      <line no="139">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="140">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="142">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">checkTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputTempUnits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Input temperature units are incorrectly entered'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="148"/>
      <line no="149">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">checkTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">outputTempUnits</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Output temperature units are incorrectly entered'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="153">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="154">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="155"/>
      <line no="156">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="157">
        <token name="T_DOC_COMMENT">     * Sets geographic latitude</token>
      </line>
      <line no="158">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="159">
        <token name="T_DOC_COMMENT">     * @param float $latitude Geographic latitude</token>
      </line>
      <line no="160">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="161">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="162">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setLatitude</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">checkLatitude</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">latitude</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Geographic latitude entered incorrectly'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="168">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170"/>
      <line no="171">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="172">
        <token name="T_DOC_COMMENT">     * Returns temperature amplitude data</token>
      </line>
      <line no="173">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="174">
        <token name="T_DOC_COMMENT">     * Assimilates the initial data, returns the prepared data to the calculation of the continentality index</token>
      </line>
      <line no="175">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="176">
        <token name="T_DOC_COMMENT">     * @return array</token>
      </line>
      <line no="177">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="178">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getAssimilateData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="181">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$TempAmplitude</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getTempAmplitudeData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$TempAmplitude</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="185"/>
      <line no="186">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$TempAmplitude</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="188"/>
      <line no="189">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="190">
        <token name="T_DOC_COMMENT">     * Returns the result of checking the validity of the type of the source data</token>
      </line>
      <line no="191">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="192">
        <token name="T_DOC_COMMENT">     * @param string $inputType Input data source type</token>
      </line>
      <line no="193">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="194">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="195">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">checkInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputTypes</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="199"/>
      <line no="200">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="201">
        <token name="T_DOC_COMMENT">     * Returns the result of checking the validity of the data source</token>
      </line>
      <line no="202">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="203">
        <token name="T_DOC_COMMENT">     * @param string|array $source Input source</token>
      </line>
      <line no="204">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="205">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">checkSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'array'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="214"/>
      <line no="215">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="216">
        <token name="T_DOC_COMMENT">     * Returns the result of checking the validity of the Temperature amplitude units</token>
      </line>
      <line no="217">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="218">
        <token name="T_DOC_COMMENT">     * @param string $tempUnits Temperature amplitude units</token>
      </line>
      <line no="219">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="220">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="221">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">checkTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$tempUnits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$tempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tempUnitOptions</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="225"/>
      <line no="226">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="227">
        <token name="T_DOC_COMMENT">     * Returns the result of checking the validity of the location latitude</token>
      </line>
      <line no="228">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="229">
        <token name="T_DOC_COMMENT">     * @param float $latitude Location latitude</token>
      </line>
      <line no="230">
        <token name="T_DOC_COMMENT">     * @return bool</token>
      </line>
      <line no="231">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="232">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">checkLatitude</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">90</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="235">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="236"/>
      <line no="237">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="238">
        <token name="T_DOC_COMMENT">     * Initializes and sets all initial data</token>
      </line>
      <line no="239">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="240">
        <token name="T_DOC_COMMENT">     * @param string $inputType Input data source type - 'file', 'array', 'json'</token>
      </line>
      <line no="241">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="242">
        <token name="T_DOC_COMMENT">     * @param array|string $source Incoming annual amplitude data</token>
      </line>
      <line no="243">
        <token name="T_DOC_COMMENT">     * Source data structure</token>
      </line>
      <line no="244">
        <token name="T_DOC_COMMENT">     * file:</token>
      </line>
      <line no="245">
        <token name="T_DOC_COMMENT">     * Year, space, temperature amplitude value</token>
      </line>
      <line no="246">
        <token name="T_DOC_COMMENT">     * Example:</token>
      </line>
      <line no="247">
        <token name="T_DOC_COMMENT">     * 2022 78.5</token>
      </line>
      <line no="248">
        <token name="T_DOC_COMMENT">     * .........</token>
      </line>
      <line no="249">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="250">
        <token name="T_DOC_COMMENT">     * array:</token>
      </line>
      <line no="251">
        <token name="T_DOC_COMMENT">     * [</token>
      </line>
      <line no="252">
        <token name="T_DOC_COMMENT">     *  Year, temperature amplitude value</token>
      </line>
      <line no="253">
        <token name="T_DOC_COMMENT">     * ]</token>
      </line>
      <line no="254">
        <token name="T_DOC_COMMENT">     * Example:</token>
      </line>
      <line no="255">
        <token name="T_DOC_COMMENT">     * [</token>
      </line>
      <line no="256">
        <token name="T_DOC_COMMENT">     *  [2017, 80.9],</token>
      </line>
      <line no="257">
        <token name="T_DOC_COMMENT">     *  [2018, 70.3],</token>
      </line>
      <line no="258">
        <token name="T_DOC_COMMENT">     *  ............</token>
      </line>
      <line no="259">
        <token name="T_DOC_COMMENT">     * ]</token>
      </line>
      <line no="260">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="261">
        <token name="T_DOC_COMMENT">     * json:</token>
      </line>
      <line no="262">
        <token name="T_DOC_COMMENT">     * This format is an array (see above) encoded into a json string</token>
      </line>
      <line no="263">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="264">
        <token name="T_DOC_COMMENT">     * @param string $inputTempUnits Input temperature amplitude units - 'F' (Fahrenheit) or 'C' (Degree Celsius)</token>
      </line>
      <line no="265">
        <token name="T_DOC_COMMENT">     * @param string $outputTempUnits Output temperature amplitude units - 'F' (Fahrenheit) or 'C' (Degree Celsius)</token>
      </line>
      <line no="266">
        <token name="T_DOC_COMMENT">     * @param float $latitude Location latitude</token>
      </line>
      <line no="267">
        <token name="T_DOC_COMMENT">     * @return void</token>
      </line>
      <line no="268">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="269">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="270">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">setInitData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputType</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="273">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$source</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="274">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setTempUnits</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$outputTempUnits</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">setLatitude</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$latitude</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="276">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="277"/>
      <line no="278">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="279">
        <token name="T_DOC_COMMENT">     * Returns prepared annual air temperature amplitude data</token>
      </line>
      <line no="280">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="281">
        <token name="T_DOC_COMMENT">     * @return array|false|mixed|string</token>
      </line>
      <line no="282">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="283">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="284">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getTempAmplitudeData</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="285">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="286">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'file'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSourceFromFile</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'array'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSourceFromArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="290">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getInputType</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'json'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="291">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSourceFromJson</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="296"/>
      <line no="297">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="298">
        <token name="T_DOC_COMMENT">     * Returns the prepared data of the annual air temperature amplitude from the source file type</token>
      </line>
      <line no="299">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="300">
        <token name="T_DOC_COMMENT">     * @return array|false</token>
      </line>
      <line no="301">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="302">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSourceFromFile</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="305">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$inputFile</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">fopen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'r'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="306">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputFile</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Error opening source data file'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="309"/>
      <line no="310">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">        </token>
        <token name="T_WHILE">while</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">feof</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputFile</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$line</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">fgets</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputFile</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="313">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$line</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="314">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CONTINUE">continue</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="315">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="316"/>
      <line no="317">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$sourceItem</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$line</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="318">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">intval</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$sourceItem</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">convertTemperature</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">outputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$sourceItem</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="319">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="320"/>
      <line no="321">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">fclose</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$inputFile</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="322"/>
      <line no="323">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="324">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="325">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="326">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="327">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="329"/>
      <line no="330">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="331">
        <token name="T_DOC_COMMENT">     * Returns prepared annual air temperature amplitude data from array source type</token>
      </line>
      <line no="332">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="333">
        <token name="T_DOC_COMMENT">     * @return array|false Air temperature amplitude data</token>
      </line>
      <line no="334">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="335">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="336">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSourceFromArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="337">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="338">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="339">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="340">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="341"/>
      <line no="342">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="343"/>
      <line no="344">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_STRING">intval</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">convertTemperature</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">inputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">outputTempUnits</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$item</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="346">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="347"/>
      <line no="348">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="351">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="352">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="354"/>
      <line no="355">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="356">
        <token name="T_DOC_COMMENT">     * Returns prepared annual air temperature amplitude data from json source type</token>
      </line>
      <line no="357">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="358">
        <token name="T_DOC_COMMENT">     * @return mixed</token>
      </line>
      <line no="359">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getSourceFromJson</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="361">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="362">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE">  </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getSource</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="363"/>
      <line no="364">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="365">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$output</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="366">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="368">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="369">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="370"/>
      <line no="371">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="372">
        <token name="T_DOC_COMMENT">     * Returns the temperature value in the selected unit of measurement</token>
      </line>
      <line no="373">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="374">
        <token name="T_DOC_COMMENT">     * Converts temperature values from one unit of measure to another</token>
      </line>
      <line no="375">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="376">
        <token name="T_DOC_COMMENT">     * @param string $unitFrom Input temperature units</token>
      </line>
      <line no="377">
        <token name="T_DOC_COMMENT">     * @param string $unitTo Output temperature units</token>
      </line>
      <line no="378">
        <token name="T_DOC_COMMENT">     * @param float $value Temperature value</token>
      </line>
      <line no="379">
        <token name="T_DOC_COMMENT">     * @return float</token>
      </line>
      <line no="380">
        <token name="T_DOC_COMMENT">     * @throws Exception</token>
      </line>
      <line no="381">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="382">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PROTECTED">protected</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">convertTemperature</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unitFrom</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unitTo</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
      </line>
      <line no="383">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitFrom</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tempUnitOptions</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitTo</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">tempUnitOptions</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="385">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Temperature units are incorrectly entered'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="386">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="387"/>
      <line no="388">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitFrom</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$unitTo</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="389">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">round</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="391"/>
      <line no="392">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitFrom</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'F'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitTo</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'C'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">convertFromFtoC</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSEIF">elseif</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitFrom</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'C'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strcasecmp</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$unitTo</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'F'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="395">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">convertFromCtoF</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="396">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ELSE">else</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="397">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Exception</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Temperature units are incorrectly entered'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="398">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="399">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="400"/>
      <line no="401">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="402">
        <token name="T_DOC_COMMENT">     * Returns the temperature value in degrees Celsius</token>
      </line>
      <line no="403">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="404">
        <token name="T_DOC_COMMENT">     * Converts temperature values in degrees Fahrenheit to values in degrees Celsius</token>
      </line>
      <line no="405">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="406">
        <token name="T_DOC_COMMENT">     * @param float $value Temperature value in degrees Fahrenheit</token>
      </line>
      <line no="407">
        <token name="T_DOC_COMMENT">     * @return float Temperature value in degrees Celsius</token>
      </line>
      <line no="408">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="409">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">convertFromFtoC</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
      </line>
      <line no="410">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="411">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">round</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">32</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIV">/</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DNUMBER">1.8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="412">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="413"/>
      <line no="414">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="415">
        <token name="T_DOC_COMMENT">     * Returns the temperature value in degrees Fahrenheit</token>
      </line>
      <line no="416">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="417">
        <token name="T_DOC_COMMENT">     * Converts temperature values in degrees Celsius to degrees Fahrenheit</token>
      </line>
      <line no="418">
        <token name="T_DOC_COMMENT">     *</token>
      </line>
      <line no="419">
        <token name="T_DOC_COMMENT">     * @param float $value Temperature value in degrees Celsius</token>
      </line>
      <line no="420">
        <token name="T_DOC_COMMENT">     * @return float Temperature value in degrees Fahrenheit</token>
      </line>
      <line no="421">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="422">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">convertFromCtoF</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">float</token>
      </line>
      <line no="423">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="424">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">round</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MULT">*</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DNUMBER">1.8</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">32</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">2</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="425">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="426">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="427"/>
    </source>
  </file>
</phpunit>
